<?xml version='1.0' encoding='utf-8'?>
<class id="GeneralService" interface="true" name="GeneralService" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> General Service for the Crownstone</brief>
  <doc>There are several characteristics that fit into the general service description. There is a characteristic
that measures the temperature, there are several characteristics that defines the crownstone, namely by
name, by type, or by location (room), and there is a characteristic to update its firmware.

If meshing is enabled, it is also possible to send a message into the mesh network using a characteristic.
</doc>
  <base access="public">
    <type name="BLEpp::GenericService" ref="BLEpp::GenericService#BLEpp::GenericService" />
    <brief> Generic Service is a <ref ref="BLEpp::Service#BLEpp::Service">BLEpp::Service</ref> and <ref ref="BLEpp::Service#BLEpp::Service::Service">BLEpp::Service::Service</ref> with characteristics</brief>
  </base>
  <constructor abstract="yes" id="GeneralService::GeneralService" name="GeneralService">
    <brief>Constructor for general crownstone service object</brief>
    <doc>Creates persistent storage (FLASH) object which is used internally to store name and other information that is
set over so-called configuration characteristics. It also initializes all characteristics.
</doc>
  </constructor>
  <method abstract="yes" id="GeneralService::init" name="init">
    <brief>Initialize a GeneralService object</brief>
    <doc>Add all characteristics and initialize them where necessary.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" id="GeneralService::readFromStorage" name="readFromStorage">
    <brief>Update the configuration characteristic.</brief>
    <doc>Persistent memory can be used to store multiple types of objects. The "name" of the device is one type for
example, the "floor" is another. Type here specifies the category of the entity to be retrieved from FLASH.
</doc>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="GeneralService::readFromStorage::type" name="type">
      <doc>configuration type to read</doc>
      <type name="uint8_t" />
    </argument>
  </method>
  <method abstract="yes" id="GeneralService::tick" name="tick">
    <brief>Perform non urgent functionality every main loop.</brief>
    <doc>Every component has a "tick" function which is for non-urgent things. Urgent matters have to be
resolved immediately in interrupt service handlers. The temperature for example is updated every
tick, because timing is not important for this at all.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" id="GeneralService::writeToConfigCharac" name="writeToConfigCharac">
    <brief>Write to the "get configuration" characteristic</brief>
    <doc>Writing is done by setting the data length properly and notifying the characteristic (and hence the softdevice)
that there is a new value available.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" id="GeneralService::writeToStorage" name="writeToStorage">
    <brief>Write configuration to FLASH.</brief>
    <doc>The configuration is (probably) set by the user through the "set configuration" characteristic and needs to be
written to FLASH. That is what this function takes care of. The writing itself will be done asynchronously, so
there is no return value that indicates success or not.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="GeneralService::writeToStorage::type" name="type">
      <doc>configuration type to write</doc>
      <type name="uint8_t" />
    </argument>
    <argument id="GeneralService::writeToStorage::length" name="length">
      <doc>length of the data to write to FLASH</doc>
      <type name="uint8_t" />
    </argument>
    <argument id="GeneralService::writeToStorage::payload" name="payload">
      <doc>the data itself to write to FLASH</doc>
      <type name="uint8_t" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="GeneralService::writeToTemperatureCharac" name="writeToTemperatureCharac">
    <brief>Update the temperature characteristic.</brief>
    <doc>This writes a value to the temperature characteristic which can subsequently read out by the user. If we write
often to this characteristic this value will be updated.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="GeneralService::writeToTemperatureCharac::temperature" name="temperature">
      <doc>A value in Celcius directly from the chip</doc>
      <type name="int32_t" />
    </argument>
  </method>
  <field access="protected" id="GeneralService::_temperatureCharacteristic" name="_temperatureCharacteristic">
    <brief>Temperature characteristic</brief>
    <type name="BLEpp::Characteristic&lt;int, void&gt;" qualifier="*" />
  </field>
  <field access="protected" id="GeneralService::_firmwareCharacteristic" name="_firmwareCharacteristic">
    <brief>Firmware characteristic</brief>
    <doc>Resets device
</doc>
    <type name="BLEpp::Characteristic&lt;int, void&gt;" qualifier="*" />
  </field>
  <field access="protected" id="GeneralService::_meshCharacteristic" name="_meshCharacteristic">
    <brief>Mesh characteristic</brief>
    <doc>Sends a message over the mesh network
</doc>
    <type name="BLEpp::Characteristic&lt;unsigned char *, void&gt;" qualifier="*" />
  </field>
  <field access="protected" id="GeneralService::_setConfigurationCharacteristic" name="_setConfigurationCharacteristic">
    <brief>Set configuration characteristic</brief>
    <doc>The configuration characteristic reuses the format of the mesh messages. The type are identifiers that are
established:

 * 0 name
 * 1 device type
 * 2 room
 * 3 floor level

As you see these are similar to current characteristics and will replace them in the future to save space.
Every characteristic namely occupies a bit of RAM (governed by the SoftDevice, so not under our control).
</doc>
    <type name="BLEpp::Characteristic&lt;unsigned char *, void&gt;" qualifier="*" />
  </field>
  <field access="protected" id="GeneralService::_selectConfigurationCharacteristic" name="_selectConfigurationCharacteristic">
    <brief>Select configuration characteristic</brief>
    <doc>Just write an identifier to read subsequently from it using <ref ref="GeneralService#GeneralService::_getConfigurationCharacteristic">GeneralService::_getConfigurationCharacteristic</ref>. See for the
possible values <ref ref="GeneralService#GeneralService::_setConfigurationCharacteristic">GeneralService::_setConfigurationCharacteristic</ref>.
</doc>
    <type name="BLEpp::Characteristic&lt;unsigned char, void&gt;" qualifier="*" />
  </field>
  <field access="protected" id="GeneralService::_getConfigurationCharacteristic" name="_getConfigurationCharacteristic">
    <brief>Get configuration characteristic</brief>
    <doc>You will have first to select a configuration before you can read from it. You write the identifiers also
described in <ref ref="GeneralService#GeneralService::_setConfigurationCharacteristic">GeneralService::_setConfigurationCharacteristic</ref>.

Then each of these returns a byte array, with e.g. a name, device type, room, etc.
</doc>
    <type name="BLEpp::Characteristic&lt;unsigned char *, void&gt;" qualifier="*" />
  </field>
  <method abstract="yes" access="protected" id="GeneralService::addFirmwareCharacteristic" name="addFirmwareCharacteristic">
    <brief>Enable the firmware upgrade characteristic.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="protected" id="GeneralService::addGetConfigurationCharacteristic" name="addGetConfigurationCharacteristic">
    <brief>Enable the get configuration characteristic.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="protected" id="GeneralService::addMeshCharacteristic" name="addMeshCharacteristic">
    <brief>Enable the mesh characteristic.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="protected" id="GeneralService::addSelectConfigurationCharacteristic" name="addSelectConfigurationCharacteristic">
    <brief>Enable the set configuration characteristic.</brief>
    <doc>See <ref ref="GeneralService#GeneralService::_selectConfigurationCharacteristic">GeneralService::_selectConfigurationCharacteristic</ref>.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="protected" id="GeneralService::addSetConfigurationCharacteristic" name="addSetConfigurationCharacteristic">
    <brief>Enable the set configuration characteristic.</brief>
    <doc>The parameter given with onWrite should actually also already be within the space allocated within the
characteristic.
See <ref ref="GeneralService#GeneralService::_setConfigurationCharacteristic">GeneralService::_setConfigurationCharacteristic</ref>.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="protected" id="GeneralService::addTemperatureCharacteristic" name="addTemperatureCharacteristic">
    <brief>Enable the temperature characteristic.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="protected" id="GeneralService::getBLEName" name="getBLEName">
    <brief>Retrieve the Bluetooth name from the object representing the BLE stack.</brief>
    <return>
      <doc>name of the device</doc>
      <type name="std::string" qualifier=" &amp;" />
    </return>
  </method>
  <method abstract="yes" access="protected" id="GeneralService::loadPersistentStorage" name="loadPersistentStorage">
    <brief>Get a handle to the persistent storage struct and load it from FLASH.</brief>
    <doc>Persistent storage is implemented in FLASH. Just as with SSDs, it is important to realize that
writing less than a minimal block strains the memory just as much as flashing the entire block.
Hence, there is an entire struct that can be filled and flashed at once.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="protected" id="GeneralService::savePersistentStorage" name="savePersistentStorage">
    <brief>Save to FLASH.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" access="protected" id="GeneralService::setBLEName" name="setBLEName">
    <brief>Write the Bluetooth name to the object representing the BLE stack.</brief>
    <doc>This updates the Bluetooth name immediately, however, it does not update the name persistently. It
has to be written to FLASH in that case.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="GeneralService::setBLEName::name" name="name">
      <type name="std::string" qualifier=" const &amp;" />
    </argument>
  </method>
</class>
