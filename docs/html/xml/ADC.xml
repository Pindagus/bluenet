<?xml version='1.0' encoding='utf-8'?>
<class abstract="true" id="ADC" name="ADC" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <base access="public">
    <type name="Dispatcher" />
  </base>
  <method id="ADC::getInstance" name="getInstance" static="yes">
    <brief>Use static variant of singleton, no dynamic memory allocation</brief>
    <return>
      <type name="ADC" qualifier=" &amp;" ref="ADC#ADC" />
    </return>
  </method>
  <method abstract="yes" id="ADC::init" name="init">
    <brief>Initialize ADC.</brief>
    <doc>The init function must called once before operating the AD converter.
Call it after you start the SoftDevice.
</doc>
    <return>
      <type name="uint32_t" />
    </return>
    <argument id="ADC::init::pin" name="pin">
      <doc>The pin to use as input (AIN<ref ref="ADC#ADC::init::pin">pin</ref>).</doc>
      <type name="uint8_t" />
    </argument>
  </method>
  <method abstract="yes" id="ADC::setClock" name="setClock">
    <brief>Assign a clock</brief>
    <doc>If decorated with a real time clock, we can add time stamps to the adc samples.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="ADC::setClock::clock" name="clock">
      <doc>Clock that is running.</doc>
      <type name="RealTimeClock" qualifier=" &amp;" />
    </argument>
  </method>
  <method id="ADC::setCurrentCurve" name="setCurrentCurve">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="ADC::setCurrentCurve::curve" name="curve">
      <type name="CurrentCurve&lt;unsigned short&gt;" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="ADC::start" name="start">
    <brief>Start the ADC sampling</brief>
    <doc>Will add samples to the current curve if it's assigned.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" id="ADC::stop" name="stop">
    <brief>Stop the ADC sampling</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" id="ADC::tick" name="tick">
    <brief>Each tick we have time to dispatch events e.g.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method abstract="yes" id="ADC::update" name="update">
    <brief>Function to be called from interrupt, do not do much there!</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="ADC::update::value" name="value">
      <type name="uint16_t" />
    </argument>
  </method>
</class>
