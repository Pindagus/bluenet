<?xml version='1.0' encoding='utf-8'?>
<index xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>Bluenet, a mesh combined with Bluetooth Low-Energy.</brief>
  <doc># Bluenet Documentation

This documentation describes the features of the Bluenet firmware. If you are not on the http://dobots.github.io/bluenet/ page, you can navigate to it, to read this in your browser.

# Bluenet Code

The code for the firmware can be found at https://github.com/dobots/bluenet.

# Crownstone

The product that makes use of this firmware is the crownstone, which is currently one of the core technologies developed at DoBots. At the moment the status is just before launching our product, so as a development inclined person, you can see our work on github (and in this documentation) as a sneak preview.

See: https://dobots.nl/products/crownstone/</doc>
  <namespace name="BLEpp" ref="BLEpp#BLEpp">
    <brief> General BLE name service</brief>
    <class name="BatteryService" ref="BLEpp::BatteryService#BLEpp::BatteryService">
      <brief> Battery service</brief>
    </class>
    <class name="BLEStack" ref="BLEpp::BLEStack#BLEpp::BLEStack">
      <brief> BLEStack defines a chip-agnostic Bluetooth Low-Energy stack</brief>
    </class>
    <classtemplate name="Characteristic" ref="BLEpp::Characteristic#BLEpp::Characteristic">
      <brief> A default characteristic</brief>
      <templatetypeparameter id="BLEpp::Characteristic::T" name="T">
        <brief>type of the value</brief>
      </templatetypeparameter>
      <templatetypeparameter id="BLEpp::Characteristic::E" name="E">
        <brief>default type (subdefined for example for built-in types)</brief>
      </templatetypeparameter>
    </classtemplate>
    <class name="Characteristic" ref="BLEpp::Characteristic#BLEpp::Characteristic">
      <brief>A characteristic for strings</brief>
    </class>
    <class name="CharacteristicBase" ref="BLEpp::CharacteristicBase#BLEpp::CharacteristicBase">
      <brief> Non-template base class for Characteristics.</brief>
    </class>
    <classtemplate name="CharacteristicGeneric" ref="BLEpp::CharacteristicGeneric#BLEpp::CharacteristicGeneric">
      <brief> Characteristic of generic type T</brief>
      <templatetypeparameter id="BLEpp::CharacteristicGeneric::T" name="T">
        <brief>Generic type T</brief>
      </templatetypeparameter>
    </classtemplate>
    <struct name="CharacteristicInit" ref="BLEpp::CharacteristicInit#BLEpp::CharacteristicInit">
      <brief> CharacteristicInit collects fields required to define a BLE characteristic</brief>
    </struct>
    <class name="GenericService" ref="BLEpp::GenericService#BLEpp::GenericService">
      <brief> Generic Service is a <ref ref="BLEpp::Service#BLEpp::Service">BLEpp::Service</ref> and <ref ref="BLEpp::Service#BLEpp::Service::Service">BLEpp::Service::Service</ref> with characteristics</brief>
    </class>
    <class name="Nrf51822BluetoothStack" ref="BLEpp::Nrf51822BluetoothStack#BLEpp::Nrf51822BluetoothStack">
      <brief> nRF51822 specific implementation of the BLEStack</brief>
    </class>
    <class name="Service" ref="BLEpp::Service#BLEpp::Service">
      <brief> Service as defined in the GATT Specification.</brief>
    </class>
  </namespace>
  <class name="ADC" ref="ADC#ADC" />
  <classtemplate name="fixed_tuple" ref="fixed_tuple#fixed_tuple">
    <brief> A fixed tuple is a vector with a templated type and a reserved capacity.</brief>
    <templatetypeparameter id="fixed_tuple::T" name="T">
      <brief>templated type which goes into the vector</brief>
    </templatetypeparameter>
    <templatenontypeparameter id="fixed_tuple::capacity" name="capacity">
      <brief>Predefined capacity of the underlying std::vector.</brief>
      <type name="uint8_t" />
    </templatenontypeparameter>
  </classtemplate>
  <class name="GeneralService" ref="GeneralService#GeneralService">
    <brief> General Service for the Crownstone</brief>
  </class>
  <class name="IndoorLocalizationService" ref="IndoorLocalizationService#IndoorLocalizationService" />
  <struct name="peripheral_device_list_t" ref="peripheral_device_list_t#peripheral_device_list_t">
    <brief> Structure of the list of peripheral devices which is sent over Bluetooth</brief>
  </struct>
  <struct name="peripheral_device_t" ref="peripheral_device_t#peripheral_device_t">
    <brief> Structure used to store peripheral devices detected during a scan.</brief>
  </struct>
  <class name="PowerService" ref="PowerService#PowerService" />
  <struct name="ps_general_service_t" ref="ps_general_service_t#ps_general_service_t">
    <brief> Struct used by the <ref ref="GeneralService#GeneralService">GeneralService</ref> to store elements</brief>
  </struct>
  <struct name="ps_indoorlocalisation_service_t" ref="ps_indoorlocalisation_service_t#ps_indoorlocalisation_service_t">
    <brief> Struct used by the &amp;lt;IndoorLocalisationService&amp;gt; to store elements</brief>
    <struct name="(anonymous::1)" ref="ps_indoorlocalisation_service_t::(anonymous::1)#ps_indoorlocalisation_service_t::(anonymous::1)" />
  </struct>
  <struct name="ps_power_service_t" ref="ps_power_service_t#ps_power_service_t">
    <brief> Struct used by the <ref ref="PowerService#PowerService">PowerService</ref> to store elements</brief>
  </struct>
  <struct name="ps_storage_base_t" ref="ps_storage_base_t#ps_storage_base_t">
    <brief> Base class for storage structures</brief>
  </struct>
  <class name="PWM" ref="PWM#PWM">
    <brief> Pulse Wide Modulation class</brief>
  </class>
  <struct name="pwm_config_t" ref="pwm_config_t#pwm_config_t">
    <brief> Pulse Wide Modulation struct</brief>
  </struct>
  <class name="ScanResult" ref="ScanResult#ScanResult">
    <brief> Result of a scan device operation</brief>
  </class>
  <class name="Storage" ref="Storage#Storage">
    <brief> Class to store items persistently in FLASH</brief>
  </class>
  <struct name="storage_config_t" ref="storage_config_t#storage_config_t">
    <brief> Storage configuration struct</brief>
  </struct>
  <classtemplate name="tuple" ref="tuple#tuple">
    <brief> A tuple is a vector with a templated type and a public constructor.</brief>
    <templatetypeparameter id="tuple::T" name="T">
      <brief>templated element which goes into the vector</brief>
    </templatetypeparameter>
  </classtemplate>
  <enum anonymous="yes" id="(anonymous::1)" name="(anonymous::1)">
    <enumvalue id="PWM_MODE_122" name="PWM_MODE_122" value="0">
      <brief>122 Hz PWM</brief>
    </enumvalue>
    <enumvalue id="PWM_MODE_244" name="PWM_MODE_244" value="1">
      <brief>244 Hz PWM</brief>
    </enumvalue>
    <enumvalue id="PWM_MODE_976" name="PWM_MODE_976" value="2">
      <brief>976 Hz PWM</brief>
    </enumvalue>
    <enumvalue id="PWM_MODE_15625" name="PWM_MODE_15625" value="3">
      <brief>15625 Hz PWM</brief>
    </enumvalue>
    <enumvalue id="PWM_MODE_62500" name="PWM_MODE_62500" value="4">
      <brief>62500 Hz PWM</brief>
    </enumvalue>
  </enum>
  <enum anonymous="yes" id="ps_storage_id" name="ps_storage_id">
    <brief> Enumeration used to identify the different storage structures</brief>
    <enumvalue id="PS_ID_POWER_SERVICE" name="PS_ID_POWER_SERVICE" value="0">
      <brief>storage for the power wervice</brief>
    </enumvalue>
    <enumvalue id="PS_ID_GENERAL_SERVICE" name="PS_ID_GENERAL_SERVICE" value="1">
      <brief>storage for the general service</brief>
    </enumvalue>
    <enumvalue id="PS_ID_INDOORLOCALISATION_SERVICE" name="PS_ID_INDOORLOCALISATION_SERVICE" value="2">
      <brief>storage for the indoor localisation service</brief>
    </enumvalue>
  </enum>
  <typedef id="pwm_mode_t" name="pwm_mode_t">
    <brief> Pulse Wide Modulation mode typedef</brief>
    <type name="pwm_mode_t" ref="index#(anonymous::1)" />
  </typedef>
  <function id="config_uart" name="config_uart">
    <brief>*</brief>
    <doc>General configuration of the serial connection. This sets the pin to be used for UART, the baudrate, the parity
bits, etc.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </function>
  <function id="SWI1_IRQHandler" name="SWI1_IRQHandler">
    <brief>Interrupt request for SoftDevice</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </function>
  <function id="write" name="write">
    <brief>*</brief>
    <doc>Write a string with printf functionality.
</doc>
    <return>
      <type builtin="yes" name="int" />
    </return>
    <argument id="write::str" name="str">
      <type builtin="yes" name="char" qualifier=" const *" />
    </argument>
  </function>
  <report name="Documentation generator" ref="report" />
</index>
