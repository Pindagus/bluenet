<?xml version='1.0' encoding='utf-8'?>
<class abstract="true" id="BLEpp::CharacteristicBase" name="CharacteristicBase" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Non-template base class for Characteristics.</brief>
  <doc>A non-templated base class saves on code size. Note that every characteristic however does still
contribute to code size.
</doc>
  <subclass access="public" name="CharacteristicGeneric" ref="BLEpp::CharacteristicGeneric#BLEpp::CharacteristicGeneric">
    <brief> Characteristic of generic type T</brief>
  </subclass>
  <constructor abstract="yes" id="BLEpp::CharacteristicBase::CharacteristicBase" name="CharacteristicBase">
    <brief>Default constructor for CharacteristicBase</brief>
  </constructor>
  <destructor id="BLEpp::CharacteristicBase::~CharacteristicBase" name="~CharacteristicBase" virtual="yes">
    <brief>Empty destructor</brief>
  </destructor>
  <method id="BLEpp::CharacteristicBase::getCccdHandle" name="getCccdHandle">
    <return>
      <type name="uint16_t" />
    </return>
  </method>
  <method id="BLEpp::CharacteristicBase::getUUID" name="getUUID">
    <return>
      <type name="UUID" qualifier=" const &amp;" />
    </return>
  </method>
  <method id="BLEpp::CharacteristicBase::getValueHandle" name="getValueHandle">
    <return>
      <type name="uint16_t" />
    </return>
  </method>
  <method abstract="yes" id="BLEpp::CharacteristicBase::getValueLength" name="getValueLength" virtual="yes">
    <brief>Return the actual length of the value</brief>
    <return>
      <type name="uint16_t" />
    </return>
  </method>
  <method abstract="yes" id="BLEpp::CharacteristicBase::getValueMaxLength" name="getValueMaxLength" virtual="yes">
    <brief>Return the maximum length of the value</brief>
    <return>
      <type name="uint16_t" />
    </return>
  </method>
  <method abstract="yes" id="BLEpp::CharacteristicBase::getValuePtr" name="getValuePtr" virtual="yes">
    <brief>Return the pointer to the memory where the value is stored</brief>
    <return>
      <type name="uint8_t" qualifier="*" />
    </return>
  </method>
  <method abstract="yes" id="BLEpp::CharacteristicBase::init" name="init">
    <brief>Initialize the characteristic.</brief>
    <doc>Defaults:

+ readable: true
+ notifies: true
+ broadcast: false
+ indicates: false

Side effect: sets member field <ref ref="BLEpp::CharacteristicBase#BLEpp::CharacteristicBase::_inited">BLEpp::CharacteristicBase::_inited</ref>.
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="BLEpp::CharacteristicBase::init::svc" name="svc">
      <type name="Service" qualifier="*" ref="BLEpp::Service#BLEpp::Service" />
    </argument>
  </method>
  <method id="BLEpp::CharacteristicBase::isNotifyingEnabled" name="isNotifyingEnabled">
    <return>
      <type builtin="yes" name="bool" />
    </return>
  </method>
  <method abstract="yes" id="BLEpp::CharacteristicBase::notify" name="notify">
    <brief>Notify any listening party.</brief>
    <doc>If this characteristic can notify, and if notification is enabled, and if there is a connection calling
this function will notify the listening party.

Notification quickly fills an outgoing buffer in BLE. When this buffer gets full, an error code
&amp;lt;BLE\_ERROR\_NO\_TX\_BUFFERS&amp;gt; is generated by the SoftDevice. In that case <ref ref="BLEpp::CharacteristicBase#BLEpp::CharacteristicBase::onNotifyTxError">BLEpp::CharacteristicBase::onNotifyTxError</ref> is called.

</doc>
    <return>
      <doc>err_code (which should be NRF_SUCCESS if no error occurred)</doc>
      <type name="uint32_t" />
    </return>
  </method>
  <method abstract="yes" id="BLEpp::CharacteristicBase::onTxComplete" name="onTxComplete" virtual="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="BLEpp::CharacteristicBase::onTxComplete::p_ble_evt" name="p_ble_evt">
      <type name="ble_common_evt_t" qualifier="*" />
    </argument>
  </method>
  <method abstract="yes" id="BLEpp::CharacteristicBase::read" name="read" virtual="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="BLEpp::CharacteristicBase::setDataLength" name="setDataLength" virtual="yes">
    <brief>Set the actual length of the data</brief>
    <doc>This is only necessary for buffer values. When a value is received
over BT we need to update the length of the data
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="BLEpp::CharacteristicBase::setDataLength::length" name="length">
      <doc>the length of the data to which the value points</doc>
      <type name="uint16_t" />
    </argument>
  </method>
  <method id="BLEpp::CharacteristicBase::setIndicates" name="setIndicates">
    <return>
      <type name="CharacteristicBase" qualifier=" &amp;" ref="BLEpp::CharacteristicBase#BLEpp::CharacteristicBase" />
    </return>
    <argument id="BLEpp::CharacteristicBase::setIndicates::indicates" name="indicates">
      <type builtin="yes" name="bool" />
    </argument>
  </method>
  <method abstract="yes" id="BLEpp::CharacteristicBase::setName" name="setName">
    <return>
      <type name="CharacteristicBase" qualifier=" &amp;" ref="BLEpp::CharacteristicBase#BLEpp::CharacteristicBase" />
    </return>
    <argument id="BLEpp::CharacteristicBase::setName::name" name="name">
      <type name="std::string" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="BLEpp::CharacteristicBase::setNotifies" name="setNotifies">
    <brief>Set this characteristic to be notifiable.</brief>
    <return>
      <type name="CharacteristicBase" qualifier=" &amp;" ref="BLEpp::CharacteristicBase#BLEpp::CharacteristicBase" />
    </return>
    <argument id="BLEpp::CharacteristicBase::setNotifies::notifies" name="notifies">
      <type builtin="yes" name="bool" />
    </argument>
  </method>
  <method id="BLEpp::CharacteristicBase::setNotifyingEnabled" name="setNotifyingEnabled">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="BLEpp::CharacteristicBase::setNotifyingEnabled::enabled" name="enabled">
      <type builtin="yes" name="bool" />
    </argument>
  </method>
  <method abstract="yes" id="BLEpp::CharacteristicBase::setUnit" name="setUnit">
    <return>
      <type name="CharacteristicBase" qualifier=" &amp;" ref="BLEpp::CharacteristicBase#BLEpp::CharacteristicBase" />
    </return>
    <argument id="BLEpp::CharacteristicBase::setUnit::unit" name="unit">
      <type name="uint16_t" />
    </argument>
  </method>
  <method abstract="yes" id="BLEpp::CharacteristicBase::setUpdateIntervalMSecs" name="setUpdateIntervalMSecs">
    <return>
      <type name="CharacteristicBase" qualifier=" &amp;" ref="BLEpp::CharacteristicBase#BLEpp::CharacteristicBase" />
    </return>
    <argument id="BLEpp::CharacteristicBase::setUpdateIntervalMSecs::msecs" name="msecs">
      <type name="uint32_t" />
    </argument>
  </method>
  <method abstract="yes" id="BLEpp::CharacteristicBase::setupWritePermissions" name="setupWritePermissions">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="BLEpp::CharacteristicBase::setupWritePermissions::ci" name="ci">
      <type name="CharacteristicInit" qualifier=" &amp;" ref="BLEpp::CharacteristicInit#BLEpp::CharacteristicInit" />
    </argument>
  </method>
  <method id="BLEpp::CharacteristicBase::setUUID" name="setUUID">
    <return>
      <type name="CharacteristicBase" qualifier=" &amp;" ref="BLEpp::CharacteristicBase#BLEpp::CharacteristicBase" />
    </return>
    <argument id="BLEpp::CharacteristicBase::setUUID::uuid" name="uuid">
      <type name="UUID" qualifier=" const &amp;" />
    </argument>
  </method>
  <method id="BLEpp::CharacteristicBase::setWritable" name="setWritable">
    <brief>Set this characteristic to be writable.</brief>
    <return>
      <type name="CharacteristicBase" qualifier=" &amp;" ref="BLEpp::CharacteristicBase#BLEpp::CharacteristicBase" />
    </return>
    <argument id="BLEpp::CharacteristicBase::setWritable::writable" name="writable">
      <type builtin="yes" name="bool" />
    </argument>
  </method>
  <method id="BLEpp::CharacteristicBase::setWritePermission" name="setWritePermission">
    <brief>Security Mode 0 Level 0: No access permissions at all (this level is not defined by the Bluetooth Core specification).\n</brief>
    <doc>Security Mode 1 Level 1: No security is needed (aka open link).\n
Security Mode 1 Level 2: Encrypted link required, MITM protection not necessary.\n
Security Mode 1 Level 3: MITM protected encrypted link required.\n
Security Mode 2 Level 1: Signing or encryption required, MITM protection not necessary.\n
Security Mode 2 Level 2: MITM protected signing required, unless link is MITM protected encrypted.\n
</doc>
    <return>
      <type name="CharacteristicBase" qualifier=" &amp;" ref="BLEpp::CharacteristicBase#BLEpp::CharacteristicBase" />
    </return>
    <argument id="BLEpp::CharacteristicBase::setWritePermission::securityMode" name="securityMode">
      <type name="uint8_t" />
    </argument>
    <argument id="BLEpp::CharacteristicBase::setWritePermission::securityLevel" name="securityLevel">
      <type name="uint8_t" />
    </argument>
  </method>
  <method abstract="yes" id="BLEpp::CharacteristicBase::written" name="written" virtual="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="BLEpp::CharacteristicBase::written::len" name="len">
      <type name="uint16_t" />
    </argument>
    <argument id="BLEpp::CharacteristicBase::written::offset" name="offset">
      <type name="uint16_t" />
    </argument>
    <argument id="BLEpp::CharacteristicBase::written::data" name="data">
      <type name="uint8_t" qualifier="*" />
    </argument>
  </method>
  <field access="protected" id="BLEpp::CharacteristicBase::_uuid" name="_uuid">
    <brief>Universally Unique Identifier (8 bytes)</brief>
    <type name="UUID" />
  </field>
  <field access="protected" id="BLEpp::CharacteristicBase::_name" name="_name">
    <brief>Name (4 bytes)</brief>
    <type name="std::string" />
  </field>
  <field access="protected" id="BLEpp::CharacteristicBase::_readperm" name="_readperm">
    <brief>Read permission (1 byte)</brief>
    <type name="ble_gap_conn_sec_mode_t" />
  </field>
  <field access="protected" id="BLEpp::CharacteristicBase::_writeperm" name="_writeperm">
    <brief>Write permission (1 byte)</brief>
    <type name="ble_gap_conn_sec_mode_t" />
  </field>
  <field access="protected" id="BLEpp::CharacteristicBase::_handles" name="_handles">
    <brief>Handles (8 bytes)</brief>
    <type name="ble_gatts_char_handles_t" />
  </field>
  <field access="protected" id="BLEpp::CharacteristicBase::_service" name="_service">
    <brief>Reference to corresponding service (4 bytes)</brief>
    <type name="Service" qualifier="*" ref="BLEpp::Service#BLEpp::Service" />
  </field>
  <field access="protected" id="BLEpp::CharacteristicBase::_inited" name="_inited">
    <type builtin="yes" name="bool" />
  </field>
  <field access="protected" id="BLEpp::CharacteristicBase::_notifies" name="_notifies">
    <brief>This characteristic can be set to notify at regular intervals.</brief>
    <doc>This interval cannot be set from the client side.
</doc>
    <type builtin="yes" name="bool" />
  </field>
  <field access="protected" id="BLEpp::CharacteristicBase::_writable" name="_writable">
    <brief>This characteristic can be written by another device.</brief>
    <type builtin="yes" name="bool" />
  </field>
  <field access="protected" id="BLEpp::CharacteristicBase::_unit" name="_unit">
    <brief>Unit</brief>
    <type name="uint16_t" />
  </field>
  <field access="protected" id="BLEpp::CharacteristicBase::_updateIntervalMsecs" name="_updateIntervalMsecs">
    <brief>Interval for updates (4 bytes), 0 means don't update</brief>
    <doc>TODO: Currently, this is not in use.
</doc>
    <type name="uint32_t" />
  </field>
  <field access="protected" id="BLEpp::CharacteristicBase::_notifyingEnabled" name="_notifyingEnabled">
    <brief>If this characteristic can notify a listener (<ref ref="BLEpp::CharacteristicBase#BLEpp::CharacteristicBase::_notifies">BLEpp::CharacteristicBase::_notifies</ref>), this field enables it.</brief>
    <type builtin="yes" name="bool" />
  </field>
  <field access="protected" id="BLEpp::CharacteristicBase::_indicates" name="_indicates">
    <brief>This characteristic can be set to indicate at regular intervals.</brief>
    <doc>Indication is different from notification, in the sense that it requires ACKs.
https://devzone.nordicsemi.com/question/310/notificationindication-difference/
</doc>
    <type builtin="yes" name="bool" />
  </field>
  <method access="protected" id="BLEpp::CharacteristicBase::configurePresentationFormat" name="configurePresentationFormat" virtual="yes">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="BLEpp::CharacteristicBase::configurePresentationFormat::" name="">
      <type name="ble_gatts_char_pf_t" qualifier=" &amp;" />
    </argument>
  </method>
  <method abstract="yes" access="protected" id="BLEpp::CharacteristicBase::onNotifyTxError" name="onNotifyTxError" virtual="yes">
    <brief>Any error in <ref ref="BLEpp::CharacteristicBase#BLEpp::CharacteristicBase::notify">BLEpp::CharacteristicBase::notify</ref> evokes onNotifyTxError.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
</class>
