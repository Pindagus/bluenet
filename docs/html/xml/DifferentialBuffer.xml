<?xml version='1.0' encoding='utf-8'?>
<classtemplate abstract="true" id="DifferentialBuffer" name="DifferentialBuffer" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief> Differential Buffer implementation</brief>
  <doc>Elements are added at the back and removed from the front. If the capacity
of the buffer is reached, the oldest element will be overwritten.

</doc>
  <templatetypeparameter id="DifferentialBuffer::T" name="T">
    <brief>primitive type such as uint8_t</brief>
  </templatetypeparameter>
  <constructor id="DifferentialBuffer::DifferentialBuffer&lt;T&gt;" name="DifferentialBuffer&lt;T&gt;">
    <brief>Default constructor</brief>
    <doc>If <ref ref="DifferentialBuffer#DifferentialBuffer::DifferentialBuffer&lt;T&gt;::initialize">initialize</ref> is set to true, the buffer will be directly initialized. To avoid
unnecessary allocation of memory, use initialize = false and call
&amp;lt;DifferentialBuffer::init()&amp;gt; only once the buffer is used.
</doc>
    <argument id="DifferentialBuffer::DifferentialBuffer&lt;T&gt;::capacity" name="capacity">
      <doc>the size with which the buffer should be initialized. A maximum
  of capacity elements can be stored in the buffer before the oldest element
  will be overwritten</doc>
      <type name="uint16_t" />
    </argument>
    <argument id="DifferentialBuffer::DifferentialBuffer&lt;T&gt;::initialize" name="initialize">
      <doc>if true, the array will be directly initialized, otherwise
  &amp;lt;DifferentialBuffer::init()&amp;gt; has to be called before accessing the buffer</doc>
      <type builtin="yes" name="bool" />
    </argument>
  </constructor>
  <destructor id="DifferentialBuffer::~DifferentialBuffer&lt;T&gt;" name="~DifferentialBuffer&lt;T&gt;" virtual="yes">
    <brief>Default destructor</brief>
    <doc>Free memory allocated for the buffer
</doc>
  </destructor>
  <method id="DifferentialBuffer::init" name="init">
    <brief>Initializes and allocates memory for the buffer based on the capacity</brief>
    <doc>used with the constructor

If the constructor was called with initialize = false, then this function
has to be called before the buffer can be accessed!

</doc>
    <return>
      <doc>true if memory allocation was successful, false otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
  </method>
  <method id="DifferentialBuffer::clear" name="clear">
    <brief>Clears the buffer</brief>
    <doc>The buffer is cleared by setting head and tail
to the beginning of the buffer. The array itself
doesn't have to be cleared
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </method>
  <method id="DifferentialBuffer::size" name="size">
    <brief>Returns the number of elements stored</brief>
    <return>
      <doc>the number of elements stored in the buffer</doc>
      <type name="uint16_t" />
    </return>
  </method>
  <method id="DifferentialBuffer::capacity" name="capacity">
    <brief>Returns the capacity of the buffer</brief>
    <doc>The capacity is the maximum number of elements that can be stored
in the buffer

</doc>
    <return>
      <doc>the capacity of the buffer</doc>
      <type name="uint16_t" />
    </return>
  </method>
  <method id="DifferentialBuffer::empty" name="empty">
    <brief>Checks if the buffer is empty</brief>
    <return>
      <doc>true if empty, false otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
  </method>
  <method id="DifferentialBuffer::full" name="full">
    <brief>Checks if the buffer is full</brief>
    <return>
      <doc>true if full, false otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
  </method>
  <method id="DifferentialBuffer::peek" name="peek">
    <brief>Peek at the oldest element without removing it</brief>
    <doc>This returns the value of the oldest element without
removing the element from the buffer. Use &amp;lt;CircularBuffer&amp;gt;&gt;pop()&gt;
to get the value and remove it at the same time

</doc>
    <return>
      <doc>the value of the oldest element</doc>
      <type name="T" />
    </return>
  </method>
  <method id="DifferentialBuffer::getFirstElement" name="getFirstElement">
    <brief>Get the first element of the buffer</brief>
    <return>
      <doc>false when the buffer was empty</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="DifferentialBuffer::getFirstElement::val" name="val">
      <doc>the value of the oldest element</doc>
      <type name="T" qualifier=" &amp;" />
    </argument>
  </method>
  <method id="DifferentialBuffer::getNextElement" name="getNextElement">
    <brief>Get the next value of the buffer, after calling <ref ref="DifferentialBuffer#DifferentialBuffer">DifferentialBuffer</ref>&gt;getFirstElement()&gt;</brief>
    <return>
      <doc>false when the last element has been reached (this read is invalid).</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="DifferentialBuffer::getNextElement::val" name="val">
      <doc>the previous value, will be set to the value of the next element</doc>
      <type name="T" qualifier=" &amp;" />
    </argument>
  </method>
  <method id="DifferentialBuffer::getLastElement" name="getLastElement">
    <brief>Get the first element of the buffer</brief>
    <return>
      <doc>false when the buffer was empty</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="DifferentialBuffer::getLastElement::val" name="val">
      <doc>the value of the oldest element</doc>
      <type name="T" qualifier=" &amp;" />
    </argument>
  </method>
  <method id="DifferentialBuffer::getSerializedLength" name="getSerializedLength">
    <brief>Get the serialized length</brief>
    <return>
      <doc>the size to fit all elements in a uint8_t buffer</doc>
      <type name="uint16_t" />
    </return>
  </method>
  <method abstract="yes" id="DifferentialBuffer::serialize" name="serialize">
    <brief>Write all elements to a buffer</brief>
    <doc>The buffer has to be of the correct size, use <ref ref="DifferentialBuffer#DifferentialBuffer">DifferentialBuffer</ref>&gt;getSerializedLength()&gt;
First sizeof(T) bytes is the first value, the bytes afterwards are increments (int8_t).
</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="DifferentialBuffer::serialize::buffer" name="buffer">
      <doc>buffer to which to write the elements</doc>
      <type name="uint8_t" qualifier="*" />
    </argument>
  </method>
  <method id="DifferentialBuffer::pop" name="pop">
    <brief>Get and remove the oldest element</brief>
    <doc>This returns the value of the oldest element and
removes it from the buffer

</doc>
    <return>
      <doc>the value of the oldest element</doc>
      <type name="T" />
    </return>
  </method>
  <method id="DifferentialBuffer::push" name="push">
    <brief>Add an element to the end of the buffer</brief>
    <doc>Elements are added at the end of the buffer and
removed from the beginning. If the buffer is full
the oldest element will be overwritten.

</doc>
    <return>
      <doc>false when the difference was too large, and thus when the buffer was cleared</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="DifferentialBuffer::push::value" name="value">
      <doc>the element to be added</doc>
      <type name="T" />
    </argument>
  </method>
</classtemplate>
